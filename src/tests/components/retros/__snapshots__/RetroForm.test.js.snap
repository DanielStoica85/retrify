// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RetroForm component should render correctly 1`] = `
<Form
  onSubmit={[Function]}
  tag="form"
>
  <LabeledFormInput
    handleChange={[Function]}
    inputId="title"
    inputName="title"
    inputType="text"
    labelFor="title"
    labelText="Retro Board Name*"
    value=""
  />
  <LabeledFormInput
    handleChange={[Function]}
    inputId="author"
    inputName="author"
    inputType="text"
    labelFor="author"
    labelText="Author Name*"
    value=""
  />
  <LabeledFormInput
    handleChange={[Function]}
    inputId="description"
    inputName="description"
    inputPlaceHolder="Give your board an (optional) description..."
    inputType="textarea"
    labelFor="description"
    labelText="Description"
    value=""
  />
  <FormGroup
    tag="div"
  >
    <Label
      for="date-picker"
      tag="label"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      Date*
    </Label>
    <br />
    <withStyles(SingleDatePicker)
      anchorDirection="left"
      appendToBody={false}
      block={false}
      calendarInfoPosition="bottom"
      customCloseIcon={null}
      customInputIcon={null}
      date={"1970-01-01T00:00:00.000Z"}
      daySize={39}
      disableScroll={false}
      disabled={false}
      displayFormat={[Function]}
      enableOutsideDays={false}
      firstDayOfWeek={null}
      focused={false}
      hideKeyboardShortcutsPanel={false}
      horizontalMargin={0}
      horizontalMonthPadding={13}
      id="date-picker"
      initialVisibleMonth={null}
      inputIconPosition="before"
      isDayBlocked={[Function]}
      isDayHighlighted={[Function]}
      isOutsideRange={[Function]}
      isRTL={false}
      keepFocusOnInput={false}
      keepOpenOnDateSelect={false}
      monthFormat="MMMM YYYY"
      navNext={null}
      navPrev={null}
      noBorder={false}
      numberOfMonths={1}
      onClose={[Function]}
      onDateChange={[Function]}
      onFocusChange={[Function]}
      onNextMonthClick={[Function]}
      onPrevMonthClick={[Function]}
      openDirection="down"
      orientation="horizontal"
      phrases={
        Object {
          "calendarLabel": "Calendar",
          "chooseAvailableDate": [Function],
          "clearDate": "Clear Date",
          "closeDatePicker": "Close",
          "dateIsSelected": [Function],
          "dateIsUnavailable": [Function],
          "enterKey": "Enter key",
          "escape": "Escape key",
          "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
          "homeEnd": "Home and end keys",
          "jumpToNextMonth": "Move forward to switch to the next month.",
          "jumpToPrevMonth": "Move backward to switch to the previous month.",
          "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
          "keyboardShortcuts": "Keyboard Shortcuts",
          "leftArrowRightArrow": "Right and left arrow keys",
          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
          "moveFocusByOneMonth": "Switch months.",
          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
          "openThisPanel": "Open this panel.",
          "pageUpPageDown": "page up and page down keys",
          "questionMark": "Question mark",
          "returnFocusToInput": "Return to the date input field.",
          "selectFocusedDate": "Select the date in focus.",
          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
          "upArrowDownArrow": "up and down arrow keys",
        }
      }
      placeholder="Date"
      readOnly={false}
      regular={false}
      renderCalendarInfo={null}
      renderDayContents={null}
      renderMonthElement={null}
      renderMonthText={null}
      reopenPickerOnClearDate={false}
      required={false}
      screenReaderInputMessage=""
      showClearDate={false}
      showDefaultInputIcon={false}
      small={false}
      verticalHeight={null}
      verticalSpacing={22}
      weekDayFormat="dd"
      withFullScreenPortal={false}
      withPortal={false}
    />
  </FormGroup>
  <FormGroup
    tag="div"
  >
    <Button
      color="primary"
      tag="button"
    >
      Save Retro
    </Button>
  </FormGroup>
</Form>
`;

exports[`RetroForm component should render correctly with expense data 1`] = `
<Form
  onSubmit={[Function]}
  tag="form"
>
  <LabeledFormInput
    handleChange={[Function]}
    inputId="title"
    inputName="title"
    inputType="text"
    labelFor="title"
    labelText="Retro Board Name*"
    value="Second Retro"
  />
  <LabeledFormInput
    handleChange={[Function]}
    inputId="author"
    inputName="author"
    inputType="text"
    labelFor="author"
    labelText="Author Name*"
    value="Costel"
  />
  <LabeledFormInput
    handleChange={[Function]}
    inputId="description"
    inputName="description"
    inputPlaceHolder="Give your board an (optional) description..."
    inputType="textarea"
    labelFor="description"
    labelText="Description"
    value="Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti itaque aut eligendi laborum excepturi animi hic similique impedit enim velit."
  />
  <FormGroup
    tag="div"
  >
    <Label
      for="date-picker"
      tag="label"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      Date*
    </Label>
    <br />
    <withStyles(SingleDatePicker)
      anchorDirection="left"
      appendToBody={false}
      block={false}
      calendarInfoPosition="bottom"
      customCloseIcon={null}
      customInputIcon={null}
      date={"2019-07-27T19:32:17.000Z"}
      daySize={39}
      disableScroll={false}
      disabled={false}
      displayFormat={[Function]}
      enableOutsideDays={false}
      firstDayOfWeek={null}
      focused={false}
      hideKeyboardShortcutsPanel={false}
      horizontalMargin={0}
      horizontalMonthPadding={13}
      id="date-picker"
      initialVisibleMonth={null}
      inputIconPosition="before"
      isDayBlocked={[Function]}
      isDayHighlighted={[Function]}
      isOutsideRange={[Function]}
      isRTL={false}
      keepFocusOnInput={false}
      keepOpenOnDateSelect={false}
      monthFormat="MMMM YYYY"
      navNext={null}
      navPrev={null}
      noBorder={false}
      numberOfMonths={1}
      onClose={[Function]}
      onDateChange={[Function]}
      onFocusChange={[Function]}
      onNextMonthClick={[Function]}
      onPrevMonthClick={[Function]}
      openDirection="down"
      orientation="horizontal"
      phrases={
        Object {
          "calendarLabel": "Calendar",
          "chooseAvailableDate": [Function],
          "clearDate": "Clear Date",
          "closeDatePicker": "Close",
          "dateIsSelected": [Function],
          "dateIsUnavailable": [Function],
          "enterKey": "Enter key",
          "escape": "Escape key",
          "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
          "homeEnd": "Home and end keys",
          "jumpToNextMonth": "Move forward to switch to the next month.",
          "jumpToPrevMonth": "Move backward to switch to the previous month.",
          "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
          "keyboardShortcuts": "Keyboard Shortcuts",
          "leftArrowRightArrow": "Right and left arrow keys",
          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
          "moveFocusByOneMonth": "Switch months.",
          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
          "openThisPanel": "Open this panel.",
          "pageUpPageDown": "page up and page down keys",
          "questionMark": "Question mark",
          "returnFocusToInput": "Return to the date input field.",
          "selectFocusedDate": "Select the date in focus.",
          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
          "upArrowDownArrow": "up and down arrow keys",
        }
      }
      placeholder="Date"
      readOnly={false}
      regular={false}
      renderCalendarInfo={null}
      renderDayContents={null}
      renderMonthElement={null}
      renderMonthText={null}
      reopenPickerOnClearDate={false}
      required={false}
      screenReaderInputMessage=""
      showClearDate={false}
      showDefaultInputIcon={false}
      small={false}
      verticalHeight={null}
      verticalSpacing={22}
      weekDayFormat="dd"
      withFullScreenPortal={false}
      withPortal={false}
    />
  </FormGroup>
  <FormGroup
    tag="div"
  >
    <Button
      color="primary"
      tag="button"
    >
      Save Retro
    </Button>
  </FormGroup>
</Form>
`;

exports[`RetroForm component should render error for invalid form submission 1`] = `
<Form
  onSubmit={[Function]}
  tag="form"
>
  <Alert
    closeAriaLabel="Close"
    color="danger"
    fade={true}
    isOpen={true}
    tag="div"
    transition={
      Object {
        "appear": true,
        "baseClass": "fade",
        "baseClassActive": "show",
        "enter": true,
        "exit": true,
        "in": true,
        "mountOnEnter": false,
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "tag": "div",
        "timeout": 150,
        "unmountOnExit": true,
      }
    }
  >
    Please provide a title, author name and a date for this retro.
  </Alert>
  <LabeledFormInput
    handleChange={[Function]}
    inputId="title"
    inputName="title"
    inputType="text"
    labelFor="title"
    labelText="Retro Board Name*"
    value=""
  />
  <LabeledFormInput
    handleChange={[Function]}
    inputId="author"
    inputName="author"
    inputType="text"
    labelFor="author"
    labelText="Author Name*"
    value=""
  />
  <LabeledFormInput
    handleChange={[Function]}
    inputId="description"
    inputName="description"
    inputPlaceHolder="Give your board an (optional) description..."
    inputType="textarea"
    labelFor="description"
    labelText="Description"
    value=""
  />
  <FormGroup
    tag="div"
  >
    <Label
      for="date-picker"
      tag="label"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      Date*
    </Label>
    <br />
    <withStyles(SingleDatePicker)
      anchorDirection="left"
      appendToBody={false}
      block={false}
      calendarInfoPosition="bottom"
      customCloseIcon={null}
      customInputIcon={null}
      date={"1970-01-01T00:00:00.000Z"}
      daySize={39}
      disableScroll={false}
      disabled={false}
      displayFormat={[Function]}
      enableOutsideDays={false}
      firstDayOfWeek={null}
      focused={false}
      hideKeyboardShortcutsPanel={false}
      horizontalMargin={0}
      horizontalMonthPadding={13}
      id="date-picker"
      initialVisibleMonth={null}
      inputIconPosition="before"
      isDayBlocked={[Function]}
      isDayHighlighted={[Function]}
      isOutsideRange={[Function]}
      isRTL={false}
      keepFocusOnInput={false}
      keepOpenOnDateSelect={false}
      monthFormat="MMMM YYYY"
      navNext={null}
      navPrev={null}
      noBorder={false}
      numberOfMonths={1}
      onClose={[Function]}
      onDateChange={[Function]}
      onFocusChange={[Function]}
      onNextMonthClick={[Function]}
      onPrevMonthClick={[Function]}
      openDirection="down"
      orientation="horizontal"
      phrases={
        Object {
          "calendarLabel": "Calendar",
          "chooseAvailableDate": [Function],
          "clearDate": "Clear Date",
          "closeDatePicker": "Close",
          "dateIsSelected": [Function],
          "dateIsUnavailable": [Function],
          "enterKey": "Enter key",
          "escape": "Escape key",
          "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
          "homeEnd": "Home and end keys",
          "jumpToNextMonth": "Move forward to switch to the next month.",
          "jumpToPrevMonth": "Move backward to switch to the previous month.",
          "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
          "keyboardShortcuts": "Keyboard Shortcuts",
          "leftArrowRightArrow": "Right and left arrow keys",
          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
          "moveFocusByOneMonth": "Switch months.",
          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
          "openThisPanel": "Open this panel.",
          "pageUpPageDown": "page up and page down keys",
          "questionMark": "Question mark",
          "returnFocusToInput": "Return to the date input field.",
          "selectFocusedDate": "Select the date in focus.",
          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
          "upArrowDownArrow": "up and down arrow keys",
        }
      }
      placeholder="Date"
      readOnly={false}
      regular={false}
      renderCalendarInfo={null}
      renderDayContents={null}
      renderMonthElement={null}
      renderMonthText={null}
      reopenPickerOnClearDate={false}
      required={false}
      screenReaderInputMessage=""
      showClearDate={false}
      showDefaultInputIcon={false}
      small={false}
      verticalHeight={null}
      verticalSpacing={22}
      weekDayFormat="dd"
      withFullScreenPortal={false}
      withPortal={false}
    />
  </FormGroup>
  <FormGroup
    tag="div"
  >
    <Button
      color="primary"
      tag="button"
    >
      Save Retro
    </Button>
  </FormGroup>
</Form>
`;
